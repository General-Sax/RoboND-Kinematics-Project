UDACITY GITHUB: https://github.com/udacity/RoboND-Kinematics-Project

MY GITHUB: 

RUBRIC: https://review.udacity.com/#!/rubrics/972/view

WALKTHROUGH: https://www.youtube.com/watch?v=Gt8DRm-REt4

### Outside Links
https://www.youtube.com/watch?v=10mUtjfGmzw


## What to include in your submission
You may submit your project as a zip file or with a link to a GitHub repo. The submission must include these items:
    - IK_server.py file with your code (make sure to add comments at appropriate places in your code)
    - Writeup report (md or pdf file)

## Project: Kinematics Pick & Place
### Writeup Template: You can use this file as a template for your writeup if you want to submit it as a markdown file, but feel free to use some other method and submit a pdf if you prefer.


## Kinematics Project: Kuka KR210 Pick & Place
*Inverse kinematics for control of the KUKA KR210 serial manipulator.*

The KUKA KR210 is an industrial robotic arm (serial manipulator) which presents an excellent testbed to explore inverse kinematics, due to its obliging geometry. It has a spherical wrist supported by coplanar system links with    with 6 joints, also referred to as axes or degrees of freedom (DOF's). In this project, the objective was to implement

---

**Steps to complete the project:**  


1. Set up your ROS Workspace.
2. Download or clone the [project repository](https://github.com/udacity/RoboND-Kinematics-Project) into the ***src*** directory of your ROS Workspace.  
3. Experiment with the forward_kinematics environment and get familiar with the robot.
4. Launch in [demo mode](https://classroom.udacity.com/nanodegrees/nd209/parts/7b2fd2d7-e181-401e-977a-6158c77bf816/modules/8855de3f-2897-46c3-a805-628b5ecf045b/lessons/91d017b1-4493-4522-ad52-04a74a01094c/concepts/ae64bb91-e8c4-44c9-adbe-798e8f688193).
5. Perform Kinematic Analysis for the robot following the [project rubric](https://review.udacity.com/#!/rubrics/972/view).
6. Fill in the `IK_server.py` with your Inverse Kinematics code. 


[//]: # (Image References)

[image1]: ./misc_images/misc1.png
[image2]: ./misc_images/misc3.png
[image3]: ./misc_images/misc2.png

## [Rubric](https://review.udacity.com/#!/rubrics/972/view) Points
### Here I will consider the rubric points individually and describe how I addressed each point in my implementation.  

---
### Writeup / README

#### 1. Provide a Writeup / README that includes all the rubric points and how you addressed each one.  You can submit your writeup as markdown or pdf.  

You're reading it!

### Kinematic Analysis
#### 1. Run the forward_kinematics demo and evaluate the kr210.urdf.xacro file to perform kinematic analysis of Kuka KR210 robot and derive its DH parameters.

Here is an example of how to include an image in your writeup.

![alt text][image1]

#### 2. Using the DH parameter table you derived earlier, create individual transformation matrices about each joint. In addition, also generate a generalized homogeneous transform between base_link and gripper_link using only end-effector(gripper) pose.

Links | alpha(i-1) | a(i-1) | d(i-1) | theta(i)
--- | --- | --- | --- | ---
0->1 | 0 | 0 | L1 | qi
1->2 | - pi/2 | L2 | 0 | -pi/2 + q2
2->3 | 0 | 0 | 0 | 0
3->4 |  0 | 0 | 0 | 0
4->5 | 0 | 0 | 0 | 0
5->6 | 0 | 0 | 0 | 0
6->EE | 0 | 0 | 0 | 0


#### 3. Decouple Inverse Kinematics problem into Inverse Position Kinematics and inverse Orientation Kinematics; doing so derive the equations to calculate all individual joint angles.

And here's where you can draw out and show your math for the derivation of your theta angles. 

![alt text][image2]

### Project Implementation

#### 1. Fill in the `IK_server.py` file with properly commented python code for calculating Inverse Kinematics based on previously performed Kinematic Analysis. Your code must guide the robot to successfully complete 8/10 pick and place cycles. Briefly discuss the code you implemented and your results. 


Here I'll talk about the code, what techniques I used, what worked and why, where the implementation might fail and how I might improve it if I were going to pursue this project further.  


And just for fun, another example image:
![alt text][image3]



[//]: # (Image References)

[image1]: ./Pick-and-Place/intercept_illustration_bkgrnd_crop.png
[image2]: ./Pick-and-Place/simultaneous_solution_multiplicity_edit.png

## The Simultaneous Solver Method:

The SSS Triangle method is elegant, and performs well, generally, but it only finds one of the two possible solutions for most configurations.

Another solution model which I investigated essentially amounts to solving for the the intersections of the sets of allowed locations for joint 3 given fixed locations for joint 2 and 5.

![alt text][image1]

Before enforcing the URDF model's joint range limits, joint 2 is free to move joint 3 to any location on a circle of radius 1.25m about its Z-axis, the length of link 2. This circle lies in the plane containing the origins of joints 0-5, the 'positioning plane.' This circle is the locus of all points 

In an analogous (but inverted) manner, joint 5 is the center may be accessed by joint 3 from any point

Joint 2 is taken to be the natural origin for solving this step in the problem.
For the sake of cognitive simplicity, we will consider the next steps as purely 2-dimensional.
In that frame of reference, Joint 5 is located at (s5, z5)

![alt text][image2]

## Analysis and Techniques

While the position and orientation of the wrist center may be decoupled problems, they have a subtle interdependence. 
I am a very spatial and visual thinker, and I often benefit profoundly from attempting to break down a problem into stages or steps with clear geometric analogs. I appreciate how powerful the matrix representations are for calculating these transformations efficiently, and I am happy to employ them as a computational shorthand, but when I'm learning a to solve a new kind of problem I have to map it out first. I have to find its symmetries, diagram it, and generally let my visual imagination explore the shape of the solution, manually, in detail.

### My Plan, Roughly - In Pictures



### The Positioning Plane

When I first began to analyze the inverse kinematics of the KR210 manipulator, I wanted to break down its geometry in detail, so I could rebuild the problem from the base link up. And the base link seemed like the right place to start, since the whole manipulator and all of the non-static reference frames pivot around it. The origin of the base_link coordinate system lies on the axis of rotation for joint_1, naturally and unsurprisingly.

While scrutinizing the coordinates of the link reference frames in RViz and comparing them with the joint origins in the URDF file, I immediately noticed that (when joint variables are zeroed) the entire manipulator is essentially embedded in a plane. This plane is coincident with the xz-plane in the zeroed pose, but its yaw relative to the base link is determined by the angle of joint 1, represented by theta_1. Joint limits on joint 1 give it symmetrical CW/CCW range of motion, capable of rotation left or right by 185 degrees from zero (aligned with the base x-axis). This allows the robot to rotate through a maximum of 370 degrees in a single turn, giving a nice cushion of flexibility to a fully circular work envelope.

NOTE: By comparing the slider bounds of the joint_state_publisher to the urdf, I observe that they are accurate representations of the urdf joint limits, as expected, although the slider gives its values in radians rather than degrees.

The aforementioned plane is a nice symmetry of this problem, as it allows us to collapse the Since the DH Z-axes of joints 2 and 3 are orthogonal to said plane, their corresponding degrees of freedom are constrained to specify a subset of the points in this plane. Furthermore, since joint 4 is a coaxial revolute, it cannot move joint 5 out of the plane either - it can only indirectly alter the location of the end effector by rotating the direction at which joint 5 may leave this plane. so,  of them,  offer subsequent links any angle out of this plane. Since the 

One result of this

### Spatial and Operational Constraints on the Wrist Center





We happen to know that our gripper will be approaching its target horizontally, 
and this allows us to constrain/determine the wrist center's location, with respect to a given target location.

We can draw some further insights from the geometry of the shelf, robot, and targets as illustrated in the 
Gazebo scene and RViz demo.

If we know what 





The first step is to determine the location of the wrist center
To do this, we must know where the target point is, and we must impose constraints or assertions
on the approach orientation of the gripper.

NOTE: the value of d7 = 0.303 is the distance to the gripper origin, not the grasping center of the end effector!
The 0.303 value is given in the problem description and intro, but seems to me a less natural choice than 0.453,
which is the actual distance between the target point and the wrist center.


# Inverse Kinematics Steps
    - A. Select target end effector point
    - B. Select or otherwise determine angle of approach
    - C. Determine location of wrist center relative to target point
    - D. Calculate joint 1 angle (rotate arm's working plane to contain wc)
    - E. Calculate cylindrical radius of wc from Z1
    - F. 


B. Constrain Angle of Approach
For the purposes of deriving the general form IK solution, this should be defined symbolically.

The vector 'p_placeholder' is an x_0 unit vector, i.e. pointing parallel to the x-axis of the base link.

This definition for p_placeholder was chosen to reflect the geometric constraints of the pick and place scene (specifically the accessibility of the shelves and the alignment of the target objects).

The assertion that the end effector must be at this specific orientation may be more rigid than necessary to ensure smooth operation, but some specific orientation must be chosen to constrain the problem, and aligning the end effector with a surface normal vector on the shelf's openings should go a long way towards maximizing the accessible volume of any shelf (if not perfectly optimizing access, which I believe it will, in fact, do - but I haven't tried to prove this).

Furthermore, with our end effector aligned along the depth dimension of the shelves, it is natural enough to specify a location on the opening's 'surface' at which to engage the automatic reaching and grasping routines.


# end_eff_unitvector set to pp_placeholder as default for this project, as it is already ideal for testing. 
# Could be made symbolic to generalize the process, to simply set to a different default for other configurations.
# All three of these distances are measured along the Z6 axis; 
# the distances are displacements relative to the previous variable, 
# with joint_6 measured from the wrist center. 
# End effector length spans distance from wc to target point
# end_effector_vector points from wc to target point


Rotation of the Positioning Plane: Theta_1
Since joints 0-5 are confined to the same vertical plane, and these are sufficient to solve the inverse positioning problem, I will call said plane the 'positioning plane.' With the wrist center determined, this plane's orientation about the Z1 axis is fully constrained. This orientation is determined by the value of theta_1, which is calculated below:


# Regardless of our choice of method, we will need the following values to be loaded:
# 
# radius_j2_j3 = dh_parameter[a2]

# The magnitude of the vector pointing from joint_3 to joint_5, although our DH parameter table
# files this location under the transformation to joint_4 coordinates, since joints 4 and up 
# share an origin at the wrist center, coincident with joint 5.

# radius_j5_j3 = sqrt(dh_parameter[a3]**2 + dh_parameter[d4]**2)
# displacements in the positioning plane between the wrist center and joint_2.
# delta_s = wrist_s - dh_parameter[a1] # dh_parameter[a1] = 0.35 (meters)
# delta_z = wrist_z - dh_parameter[d1] # dh_parameter[d1] = 0.75 (meters)

# radius_j5_j3, delta_s, delta_z

## The SSS Triangle Method:
There is a slight hiccup here, the vertical difference between joints 3 and 4. This  of 
Since the articulation of joint 4 is revolute about the axis between itself and joint 5 (a.k.a. the wrist center), and since both joint origins lie in plane with joint 3 AND joint 2, finding ain plane with the wrist center - **BUT ONLY APPROXIMATELY; SEE CORRECTION!** - the 
The origins of joints 2, 3, and 5 all lie in the
Let a, b, c represent sides of the triangle 

The differences between the coordinates of joint_2 and joint_5 are important parameters for solving the SSS triangle, ABC, described above. These differences are also the x and y coordinates of the wrist center in the joint 2 reference frame. The values are denoted here as delta_s and delta_z.

With the arm rotated into the positioning plane, the cylindrical radius to joint_2 is a constant 0.35m along s.
Similarly, joint_2 is always a constant 0.75m above the base link's z=0 plane, regardless of any other parameters.

Together, this means that joint_2 traverses a circle of radius 0.35m, fixed at 0.75m off the ground plane.
Setting theta_1 and thus the orientation of s effectively selects a point for j2 on this circle, and that is the origin for the coordinates of the SSS Triangle method.


# Let A, B, C name the vertices of the triangle described by the origins of joints 2, 3, and 4.
# let the symbols A and B represent the interior angles of triangle ABC at their synonymous vertices.
# A, B, C = symbols('A B C')
# C is not strictly needed, but it may be useful for appraising whether a given pose is possible.
# If C comes back imaginary, this would indicate an unviable solution.

# Note that vertex angle C is not given a symbol; it simply isn't necessary, as it wouldn't be used in any later step.
# A, B = symbols('A B')

# let a, b, c represent side lengths of ABC, named conventionally (opposite their angles)
# a, b, c = symbols('a b c')

# Here, A is the vertex located at joint_2, B at joint_3, and C at joint_5 (shared origin with joints 4-6)


the x-axis of the joint_1 reference frame, called here 's.' The s-axis is determined by the wrist center: it is parallel to the projection of a vector from the base_link origin to the wrist center. Referring to this dimension or its values as 's' may be unnecessary complication, but it emphasizes the profound cylindrical symmetry of manipulator configurations.

Determining theta_1 doesn't simply move us closer to solving for all the joint angles; it permits us to rotate the coordinate system the appropriate amount to locate it into the sz-plane required by the wrist center.


# Initially we have all side lengths, so let's prepare a dict:
# sides = {}
# # ...but only one leg has a known location/orientation: side b, which is coincident with a vector pointing from j2 to j5.
# # This vector ( we'll just call it "b_vector") ultimately determines the existence and nature of any solutions.
# # The side length b is the magnitude of b_vector:
# # b = sqrt(delta_s**2 + delta_z**2)

# # sides[b] = sqrt(delta_s**2 + delta_z**2).evalf(subs=t)
# sides[b] = sqrt(delta_s**2 + delta_z**2)

# # a and c are fixed distances, a the distance between joints 3 and 5 (=1.25m) and b between 2 and 3.
# # These are both defined above, as radius_j5_j3 and radius_j2_j3 respectively
# sides[a] = radius_j5_j3
# sides[c] = dh_parameter[a2]

# sides


# Solving SSS Triangles is fun and simple!
# A = acos((b**2 + c**2 - a**2)/(2 * b * c)).subs(sides)
# B = acos((a**2 + c**2 - b**2)/(2 * a * c)).subs(sides)
# C = acos((a**2 + b**2 - c**2)/(2 * a * b)).subs(sides)
# A, B

# A = A.evalf(subs=t)
# B = B.evalf(subs=t)
# C = C.evalf(subs=t)

# Calculate numerical error between expected sum of interior angles and the sum of our results.
# num_error = N(pi - (A + B + C))

# If A, B, or C are imaginary or complex, there is no physical solution.
# If num_error is not approximately zero, then there is likely an error upstream. 
# A, B, C, num_error


# The rotation of b_vector about Z2 (common normal of s and Z1) sets the orientation of the triangle ABC, 
# which in turn determines various angular terms in the formulas for theta_2 and theta_3.
# One such term is wc_pitch, the angle between b_vector and the s-axis:
# wc_pitch = atan2(delta_z, delta_s)
# wc_pitch, wc_pitch.evalf(subs=t)


# Since angles A, B, C are positive definite, and wc_pitch is measured CCW from the horizontal (opposite sign to theta_2),
# the angle (B + wc_pitch) is effectively wc_pitch, with some as-yet-undetermined positive phase shift.
# 
# Theta_2 is initially offset by a phase of 90 degrees in the positive gamma direction

# gamma_5 is an intermediate angle in this calculation.
# For now, it represents the deflection of the joint 5 radiant from the horizontal,
# as shown in illustration. 
# Behaves identically to theta_2 for ease of explanation. 
# This is hard to visualize, add illustration!

Joint Range Enforcement
Before going forward, we should vet any and all solutions to ensure that they are viable commands for the robot. trying to choose between two solutions, or for that matter, accepting the miraculous appearance of a unique solution, First, we must resolve the value of theta_3. This must be calculated from gamma_5 and geometric methods.

Discriminating Between Multiple Viable Solutions
From a control and integrity standpoint, it makes sense to keep the robot's center of mass as near to the Z1 axis as possible, which could be calculated more delicately using the inertial information in the URDF file. This would be a bit of an undertaking, to say the least.

Another general consideration is similarity to the current pose. This is much easier to assess.

Joints 4-6: The Orientation Problem
The process of conforming the wrist links onto the now-constrained arm links breaks down into a few separate elements.

- Account for the slight misalignment between j3-j5 axis and rotation axis of joint_4
- Find theta_4 such that joint_5's DoF can access the target point.
- Find theta_6 such that the end effector is correctly oriented relative to the target.
We do, however, have some parts of this process partially complete! The angles of joints 4 and 5 are ,






# KR210 Kinematic Analysis and IK Derivations
## Decoupling and Solution Strategy

### Positioning Plane Symmetry

## Wrist Position Constraint

## Joint 1

For the purposes of deriving the general form IK solution, this should be defined symbolically.

The vector 'p_placeholder' is an x_0 unit vector, i.e. pointing parallel to the x-axis of the base link.

This definition for p_placeholder was chosen to reflect the geometric constraints of the pick and place scene (specifically the accessibility of the shelves and the alignment of the target objects).

The assertion that the end effector must be at this specific orientation may be more rigid than necessary to ensure smooth operation, but some specific orientation must be chosen to constrain the problem, and aligning the end effector with a surface normal vector on the shelf's openings should go a long way towards maximizing the accessible volume of any shelf (if not perfectly optimizing access, which I believe it will, in fact, do - but I haven't tried to prove this).

Furthermore, with our end effector aligned along the depth dimension of the shelves, it is natural enough to specify a location on the opening's 'surface' at which to engage the automatic reaching and grasping routines.

Since joints 0-5 are confined to the same vertical plane, and these are sufficient to solve the inverse positioning problem, I will call said plane the 'positioning plane.' With the wrist center determined, this plane's orientation about the Z1 axis is fully constrained. This orientation is determined by the value of theta_1, which is calculated below:

## Joints 2 & 3

Joints 4, 5, & 6 - Euler Angles
Joint Range Enforcement
Selecting the 'Best' Solution


